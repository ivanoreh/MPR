/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mpr;
import java.io.File;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import java.util.Date; 



public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */public HashMap<String, Double> Mapa = new HashMap<String, Double>();
       public Vector<Racun> Racuni = new Vector<Racun>();
       boolean vec_je = false;
       
    public Main() throws FileNotFoundException, IOException {
        initComponents();
               
         //UČITAVA
         Load();       
         
         //OBRADA
         /*PopisRacuna.getModel().setValueAt("i", 1, 1);
         for( int i=0; i<Racuni.size(); i++){
             PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).redni_broj, 1, i);
             PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).datum, 1, i);
             PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).ime, 2, i);
             PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).iznos, 3, i);
         }*/
       
         PokaziKupce();
         // UPIS NATRAG U PODACI.txt
         Save();
    }

    public void PokaziKupce(){
         Iterator iter = Mapa.keySet().iterator();
         int br = 0;
         
         
        while(iter.hasNext() && br <100) {
            
        String key = (String)iter.next();
        double val = (double) Mapa.get(key);
        
        PopisKupaca.getModel().setValueAt(key, br, 0);
        PopisKupaca.getModel().setValueAt(val, br, 1);
        br++;
        }
        
        br=0;
        for( int i=Racuni.size()-1; i>=0; i--){
            if(br >98) break;
            int rb = Integer.parseInt(Racuni.elementAt(i).redni_broj);
            
            PopisRacuna.getModel().setValueAt(rb, br, 0);
            PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).datum, br, 1);
            PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).ime, br, 2);
            PopisRacuna.getModel().setValueAt(Racuni.elementAt(i).iznos, br, 3);
            br++;
        }
         
    
        
    }
    public void Save() throws FileNotFoundException{
        PrintWriter writer = new PrintWriter("PODACI.txt");
         for( int i=0; i<Racuni.size(); i++){
             String in = Racuni.elementAt(i).redni_broj;
             String iznos = Racuni.elementAt(i).iznos;
             String kup = Racuni.elementAt(i).ime;
             String dat = Racuni.elementAt(i).datum;
             writer.println(in+ "&" + dat + "&" + kup +"&" +iznos);
         }
        writer.close();
    }
    
    public void Load() throws FileNotFoundException, IOException{        
             
        Mapa.clear();
        Racuni.clear();
        
             BufferedReader reader = new BufferedReader(new FileReader("PODACI.txt"));
                 String line = "";
                 while ((line = reader.readLine()) != null) {
                     String[] prvi= new String[5];  int broj=0;
                     
                     prvi[0] = ""; prvi[1] = ""; prvi[2] = ""; prvi[3] ="";prvi[4]="";
                     
                     for( int i=0; i<line.length(); i++){
                         if(line.charAt(i) == '&'){ broj++; i++;}
                         prvi[broj] += line.charAt(i);
                     }
                     Racun novi = new Racun(prvi[2], prvi[1], prvi[3], prvi[0]  );
                         Racuni.add(novi);
                 }
           
        
         for( int i=0; i<Racuni.size(); i++){
             double pare =  Double.parseDouble(Racuni.elementAt(i).iznos.replaceAll(",","."));
             if( Mapa.containsKey(Racuni.elementAt(i).ime) ) pare += Mapa.get(Racuni.elementAt(i).ime); // ako vec postoji poveca
             Mapa.put(Racuni.elementAt(i).ime, pare);
         }
              
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Ime = new javax.swing.JTextField();
        Iznos = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        Potvrda = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PopisKupaca = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        PopisRacuna = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 153));

        jLabel1.setText("       Unos");

        jLabel2.setText("Kupac");

        jLabel3.setText("Iznos");

        Ime.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                ImeInputMethodTextChanged(evt);
            }
        });
        Ime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ImeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ImeKeyReleased(evt);
            }
        });

        jButton2.setText("Ispis potrošnje kupaca");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Potvrda.setText("Potvrdi");
        Potvrda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PotvrdaActionPerformed(evt);
            }
        });

        PopisKupaca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Kupac", "Iznos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PopisKupaca);
        if (PopisKupaca.getColumnModel().getColumnCount() > 0) {
            PopisKupaca.getColumnModel().getColumn(0).setResizable(false);
            PopisKupaca.getColumnModel().getColumn(1).setResizable(false);
        }

        PopisRacuna.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Broj računa", "Datum", "Kupac", "Iznos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(PopisRacuna);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Potvrda)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)))
                            .addGap(47, 47, 47)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Ime)
                                .addComponent(Iznos, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Ime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Iznos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(Potvrda)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)))
                .addGap(68, 68, 68))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PotvrdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PotvrdaActionPerformed
       Racun novi;
       
       Date date = new Date();
       SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
       String datum = sdf.format(date);
       System.out.println(datum);
       
       int rbr = Racuni.size() +1;
       String broj = Integer.toString(rbr);
       
       String kupac = Ime.getText();
       String iznos = Iznos.getText();
       
       novi = new Racun(kupac, datum, iznos, broj);
       
       Racuni.add(novi);
       
       Ime.setText("");
       Iznos.setText("");
       
         try {
             Save(); 
         } catch (FileNotFoundException ex) {
             Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
         } 
         try {
             Load();
         } catch (IOException ex) {
             Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
         }
         PokaziKupce();
         
         vec_je = false;
    }//GEN-LAST:event_PotvrdaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
         PrintWriter out = null;
         try {
             out = new PrintWriter(new FileWriter("Ispis.xls"));
         } catch (IOException ex) {
             Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
         }
         
         Iterator iter = Mapa.keySet().iterator();
         
         
        while(iter.hasNext()) {
            
        String key = (String)iter.next();
        double val = (double) Mapa.get(key);
        
        out.println(key + "  " + val);
        }
        out.close();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    
    private void ImeInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ImeInputMethodTextChanged
       String napisano = Ime.getText();
       
        if (napisano.length() < 2 || vec_je == true) return;
        else {
            Vector<String> dobri = new Vector<String>();
            
        Iterator iter = Mapa.keySet().iterator();
                  
        while(iter.hasNext()) {
        String key = (String)iter.next();
            if( key.toLowerCase().contains(napisano.toLowerCase())) dobri.add(key);
        }
        if( dobri.size() == 1){
            vec_je = true;
            Ime.setText(dobri.elementAt(0));
            return;
        }
        else return;
        
        }
               
    }//GEN-LAST:event_ImeInputMethodTextChanged

    private void ImeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ImeKeyPressed
         
    }//GEN-LAST:event_ImeKeyPressed

    private void ImeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ImeKeyReleased
        String napisano = Ime.getText();
       
        if (napisano.length() < 2 || vec_je == true) return;
        else {
            Vector<String> dobri = new Vector<String>();
            
        Iterator iter = Mapa.keySet().iterator();
                  
        while(iter.hasNext()) {
        String key = (String)iter.next();
            if( key.toLowerCase().contains(napisano.toLowerCase())) dobri.add(key);
        }
        if( dobri.size() == 1){
            vec_je = true;
            Ime.setText(dobri.elementAt(0));
            return;
        }
        else return;
        
        }
    }//GEN-LAST:event_ImeKeyReleased

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Main().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Ime;
    private javax.swing.JTextField Iznos;
    private javax.swing.JTable PopisKupaca;
    private javax.swing.JTable PopisRacuna;
    private javax.swing.JButton Potvrda;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
